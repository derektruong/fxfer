// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/derektruong/fxfer/storage (interfaces: Source,Destination)
//
// Generated by this command:
//
//	mockgen -destination=./mock_storage.go -package=mock_storage github.com/derektruong/fxfer/storage Source,Destination
//

// Package mock_storage is a generated GoMock package.
package mock_storage

import (
	context "context"
	io "io"
	reflect "reflect"
	time "time"

	gomock "go.uber.org/mock/gomock"
	xferfile "github.com/derektruong/fxfer/internal/xferfile"
	protoc "github.com/derektruong/fxfer/protoc"
)

// MockSource is a mock of Source interface.
type MockSource struct {
	ctrl     *gomock.Controller
	recorder *MockSourceMockRecorder
	isgomock struct{}
}

// MockSourceMockRecorder is the mock recorder for MockSource.
type MockSourceMockRecorder struct {
	mock *MockSource
}

// NewMockSource creates a new mock instance.
func NewMockSource(ctrl *gomock.Controller) *MockSource {
	mock := &MockSource{ctrl: ctrl}
	mock.recorder = &MockSourceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSource) EXPECT() *MockSourceMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockSource) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockSourceMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockSource)(nil).Close))
}

// GetFileFromOffset mocks base method.
func (m *MockSource) GetFileFromOffset(ctx context.Context, filePath string, offset int64, credential protoc.Client) (io.ReadCloser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFileFromOffset", ctx, filePath, offset, credential)
	ret0, _ := ret[0].(io.ReadCloser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFileFromOffset indicates an expected call of GetFileFromOffset.
func (mr *MockSourceMockRecorder) GetFileFromOffset(ctx, filePath, offset, credential any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFileFromOffset", reflect.TypeOf((*MockSource)(nil).GetFileFromOffset), ctx, filePath, offset, credential)
}

// GetFileInfo mocks base method.
func (m *MockSource) GetFileInfo(ctx context.Context, filePath string, protocol protoc.Client) (xferfile.Info, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFileInfo", ctx, filePath, protocol)
	ret0, _ := ret[0].(xferfile.Info)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFileInfo indicates an expected call of GetFileInfo.
func (mr *MockSourceMockRecorder) GetFileInfo(ctx, filePath, protocol any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFileInfo", reflect.TypeOf((*MockSource)(nil).GetFileInfo), ctx, filePath, protocol)
}

// MockDestination is a mock of Destination interface.
type MockDestination struct {
	ctrl     *gomock.Controller
	recorder *MockDestinationMockRecorder
	isgomock struct{}
}

// MockDestinationMockRecorder is the mock recorder for MockDestination.
type MockDestinationMockRecorder struct {
	mock *MockDestination
}

// NewMockDestination creates a new mock instance.
func NewMockDestination(ctrl *gomock.Controller) *MockDestination {
	mock := &MockDestination{ctrl: ctrl}
	mock.recorder = &MockDestinationMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDestination) EXPECT() *MockDestinationMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockDestination) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockDestinationMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockDestination)(nil).Close))
}

// CreateFile mocks base method.
func (m *MockDestination) CreateFile(ctx context.Context, path string, size int64, modTime time.Time, protocol protoc.Client) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFile", ctx, path, size, modTime, protocol)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateFile indicates an expected call of CreateFile.
func (mr *MockDestinationMockRecorder) CreateFile(ctx, path, size, modTime, protocol any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFile", reflect.TypeOf((*MockDestination)(nil).CreateFile), ctx, path, size, modTime, protocol)
}

// DeleteFile mocks base method.
func (m *MockDestination) DeleteFile(ctx context.Context, filePath string, protocol protoc.Client) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFile", ctx, filePath, protocol)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteFile indicates an expected call of DeleteFile.
func (mr *MockDestinationMockRecorder) DeleteFile(ctx, filePath, protocol any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFile", reflect.TypeOf((*MockDestination)(nil).DeleteFile), ctx, filePath, protocol)
}

// FinalizeTransfer mocks base method.
func (m *MockDestination) FinalizeTransfer(ctx context.Context, filePath string, protocol protoc.Client) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FinalizeTransfer", ctx, filePath, protocol)
	ret0, _ := ret[0].(error)
	return ret0
}

// FinalizeTransfer indicates an expected call of FinalizeTransfer.
func (mr *MockDestinationMockRecorder) FinalizeTransfer(ctx, filePath, protocol any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FinalizeTransfer", reflect.TypeOf((*MockDestination)(nil).FinalizeTransfer), ctx, filePath, protocol)
}

// GetFileInfo mocks base method.
func (m *MockDestination) GetFileInfo(ctx context.Context, filePath string, protocol protoc.Client) (xferfile.Info, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFileInfo", ctx, filePath, protocol)
	ret0, _ := ret[0].(xferfile.Info)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFileInfo indicates an expected call of GetFileInfo.
func (mr *MockDestinationMockRecorder) GetFileInfo(ctx, filePath, protocol any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFileInfo", reflect.TypeOf((*MockDestination)(nil).GetFileInfo), ctx, filePath, protocol)
}

// TransferFileChunk mocks base method.
func (m *MockDestination) TransferFileChunk(ctx context.Context, filePath string, reader io.Reader, offset int64, protocol protoc.Client) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TransferFileChunk", ctx, filePath, reader, offset, protocol)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TransferFileChunk indicates an expected call of TransferFileChunk.
func (mr *MockDestinationMockRecorder) TransferFileChunk(ctx, filePath, reader, offset, protocol any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TransferFileChunk", reflect.TypeOf((*MockDestination)(nil).TransferFileChunk), ctx, filePath, reader, offset, protocol)
}
